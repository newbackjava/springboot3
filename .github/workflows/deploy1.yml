name: deploy

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) QEMU/Buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4) 이미지 빌드 & 푸시
      - name: Build & Push Spring Boot Image
        uses: docker/build-push-action@v6
        with:
          context: ./springboot-app3
          file: ./springboot-app3/Dockerfile
          push: true
          tags: jungwonalicia/springboot3-web3:latest
          platforms: linux/amd64

      # 5) AWS 자격증명 (Access Key 방식)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}     # (스크린샷의 키)
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2                              # 서울 리전 예시

      # 6) SSM Run Command로 원격 배포 (EC2에서 docker compose 실행)
      - name: Deploy via AWS SSM
        env:
          TARGET_INSTANCE_ID: i-047e34f1497292983
          # (태그 기반 쓸 거면 아래 두 줄 사용하고 instance-ids 대신 targets 옵션 사용)
          # TARGET_TAG_KEY: Name
          # TARGET_TAG_VALUE: alicia
        run: |
          set -euo pipefail
          
          REMOTE_SCRIPT=$(cat <<'EOS'
          set -e
          cd ~/springboot3
          
          # (사설 레포면) Docker Hub 로그인: EC2 쪽 환경변수/파라미터에서 주입 권장
          if [ -n "${DOCKERHUB_USERNAME:-}" ] && [ -n "${DOCKERHUB_TOKEN:-}" ]; then
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
          fi
          
          docker compose pull
          docker compose up -d
          docker compose ps
          EOS
          )
          
          # --- InstanceId로 실행 ---
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions deploy" \
            --instance-ids "$TARGET_INSTANCE_ID" \
            --parameters commands="$REMOTE_SCRIPT" \
            --query "Command.CommandId" \
            --output text)
          
          echo "SSM CommandId: ${CMD_ID}"
          
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "$TARGET_INSTANCE_ID"
          aws ssm list-command-invocations --command-id "$CMD_ID" --details --output text
